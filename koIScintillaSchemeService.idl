/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is Komodo code.
 * 
 * The Initial Developer of the Original Code is ActiveState Software Inc.
 * Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 * ActiveState Software Inc. All Rights Reserved.
 * 
 * Contributor(s):
 *   ActiveState Software Inc
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "ISciMoz.idl"

interface ISciMoz;

[scriptable, uuid(E116A318-F894-42C5-A7D5-1F37171832AD)]
interface koIScintillaScheme : nsISupports {
    attribute boolean writeable;
    attribute boolean unsaved;
    attribute wstring name;
    attribute wstring fname;
    attribute boolean preferFixed;
    attribute boolean caretLineVisible;
    attribute boolean useSelFore;
    attribute boolean isDirty;
    
    koIScintillaScheme clone(in wstring newname);
    void saveAs(in wstring newname);
    void save();
    void revert();
    void remove();
    
    string getColor(in string colorname);
    void setColor(in string colorname, in string colorvalue);

    void setFore(in string language, /* null means common styles */
                 in string styleId,
                 in string color);
    void setBack(in string language, /* null means common styles */
                 in string styleId,
                 in string color);
    void setBold(in string language, /* null means common styles */
                 in string styleId,
                 in boolean bold);
    void setItalic(in string language, /* null means common styles */
                   in string styleId,
                   in boolean italic);
    void setFont(in string styleId, in string face); 
    void setFaceType(in string language, in string styleId, in boolean useFixed); 
    void setSize(in string language, /* null means common styles */
                 in string styleId, /* null means default */
                 in long size);

    string getFore(in string language, /* null means common styles */
                 in string styleId);
    string getBack(in string language, /* null means common styles */
                 in string styleId);
    boolean getBold(in string language, /* null means common styles */
                 in string styleId);
    boolean getItalic(in string language, /* null means common styles */
                      in string styleId);
    string getFont(in string styleId); /* encoding_fixed|proportional */
    boolean getFaceType(in string language, /* null means common styles */
                        in string styleId); /* null means default */
    long getSize(in string language, /* null means common styles */
                 in string styleId); /* null means default */

    void resetStyle(in string language, /* null means common styles */
                    in string styleId);

    void applyScheme(in ISciMoz scintilla,
                     in string language,
                     in string encoding,
                     in boolean useFixed);
    string getCommonName(in string language,
                         in long scimozStyleNo);
    string getSpecificName(in string language,
                           in long scimozStyleNo);
};

[scriptable, uuid(D116A318-F894-42C5-A7D5-1F37171832AC)]
interface koIScintillaSchemeService : nsISupports {
    void addScheme(in koIScintillaScheme scheme);
    void removeScheme(in koIScintillaScheme scheme);
    void getSchemeNames([array, size_is(count)] out wstring schemes,
                        out unsigned long count);
    koIScintillaScheme getScheme(in wstring name);
    void getCommonStyles([array, size_is(count)] out string styleLabels,
                         out unsigned long count);
    void getLanguageStyles(in string language,
                           [array, size_is(count)] out string styleLabels,
                           out unsigned long count);
    void purgeUnsavedSchemes();
    void convertToHTMLFile(in IScimoz scimoz, in wstring title,
                           in wstring language, in long style_bits,
                           in string encoding_name, in wstring fname,
                           in boolean selectionOnly,
                           in boolean forceColor);
};

